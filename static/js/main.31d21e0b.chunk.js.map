{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_BY_ALPHABET","SORT_BY_LENGTH","App","useState","sortedField","setSortedField","isReverse","setIsReverse","showReset","setShowReset","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"mPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAmB,iBACnBC,EAAiB,SA2BVC,EAAM,WACjB,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACMC,EA7BiB,SAACA,EAAD,GAAwC,IAA9BN,EAA6B,EAA7BA,YAAaE,EAAgB,EAAhBA,UACxCK,EAAa,YAAOD,GAqB1B,OAnBIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKJ,EACH,OAAOa,EAAME,cAAcD,GAE7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXV,GACFK,EAAcM,UAGTN,EAOOO,CAAiBnB,EAAiB,CAAEK,cAAaE,cAkB/D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAgBJ,IAEhCsB,QAzBe,WACrBjB,EAAeL,GACfS,GAAa,IAiBT,iCAWA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAgBH,IAEhCqB,QA/Ba,WACnBjB,EAAeJ,GACfQ,GAAa,IAuBT,4BAWA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAaf,IAEjBgB,QAAS,kBAAMf,GAAcD,IAN/B,sBAWEE,GAAaF,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA9CI,WACZjB,EAAe,IACfE,GAAa,GACbE,GAAa,IAwCP,sBAUJ,6BACGC,EAAMa,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YClHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.31d21e0b.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BY_ALPHABET = 'alphabetically';\nconst SORT_BY_LENGTH = 'length';\n\nconst getPreparedGoods = (goods, { sortedField, isReverse }) => {\n  const preparedGoods = [...goods];\n\n  if (sortedField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortedField) {\n        case SORT_BY_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_BY_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortedField, setSortedField] = useState('');\n  const [isReverse, setIsReverse] = useState(false);\n  const [showReset, setShowReset] = useState(false);\n  const goods = getPreparedGoods(goodsFromServer, { sortedField, isReverse });\n\n  const sortByAlphabet = () => {\n    setSortedField(SORT_BY_ALPHABET);\n    setShowReset(true);\n  };\n\n  const sortByLength = () => {\n    setSortedField(SORT_BY_LENGTH);\n    setShowReset(true);\n  };\n\n  const reset = () => {\n    setSortedField('');\n    setIsReverse(false);\n    setShowReset(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortedField !== SORT_BY_ALPHABET },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortedField !== SORT_BY_LENGTH },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReverse },\n          )}\n          onClick={() => setIsReverse(!isReverse)}\n        >\n          Reverse\n        </button>\n\n        {(showReset || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}